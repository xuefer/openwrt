From c1cf78a002bc12d5d68a3aced3ede7a8eeca2f8a Mon Sep 17 00:00:00 2001
From: Xuefer <xuefer@gmail.com>
Date: Sat, 4 Jul 2015 12:27:07 +0800
Subject: [PATCH 2/3] fix write-strings warning (error)

---
 initd/init.c        |  4 +++-
 initd/mkdev.c       |  7 +++---
 initd/preinit.c     | 12 +++++++---
 inittab.c           |  2 +-
 plug/coldplug.c     |  3 ++-
 plug/hotplug.c      |  6 ++---
 plug/hotplug.h      |  8 +++----
 rcS.c               |  8 +++----
 rcS.h               |  4 ++--
 service/instance.c  | 67 +++++++++++++++++++++++++++++++++++------------------
 service/trigger.c   |  2 +-
 signal.c            |  2 +-
 system.c            |  4 +++-
 upgraded/upgraded.c |  4 +++-
 14 files changed, 85 insertions(+), 48 deletions(-)

diff --git a/initd/init.c b/initd/init.c
index 4d17563..1c72116 100644
--- a/initd/init.c
+++ b/initd/init.c
@@ -84,7 +84,9 @@ main(int argc, char **argv)
 
 	pid = fork();
 	if (!pid) {
-		char *kmod[] = { "/sbin/kmodloader", "/etc/modules-boot.d/", NULL };
+		char arg0[] = "/sbin/kmodloader";
+		char arg1[] = "/etc/modules-boot.d/";
+		char *kmod[] = { arg0, arg1, NULL };
 
 		if (debug < 3) {
 			int fd = open("/dev/null", O_RDWR);
diff --git a/initd/mkdev.c b/initd/mkdev.c
index e6d3d0c..003fe50 100644
--- a/initd/mkdev.c
+++ b/initd/mkdev.c
@@ -60,15 +60,16 @@ static void make_dev(const char *path, bool block, int major, int minor)
 
 static void find_devs(bool block)
 {
-	char *path = block ? "/sys/dev/block" : "/sys/dev/char";
+	const char *devpath = block ? "/sys/dev/block" : "/sys/dev/char";
+	char *path;
 	struct dirent *dp;
 	DIR *dir;
 
-	dir = opendir(path);
+	dir = opendir(devpath);
 	if (!dir)
 		return;
 
-	path = buf2 + sprintf(buf2, "%s/", path);
+	path = buf2 + sprintf(buf2, "%s/", devpath);
 	while ((dp = readdir(dir)) != NULL) {
 		char *c;
 		int major = 0, minor = 0;
diff --git a/initd/preinit.c b/initd/preinit.c
index f38d8ef..5d8154c 100644
--- a/initd/preinit.c
+++ b/initd/preinit.c
@@ -51,7 +51,8 @@ static void
 spawn_procd(struct uloop_process *proc, int ret)
 {
 	char *wdt_fd = watchdog_fd();
-	char *argv[] = { "/sbin/procd", NULL};
+	char arg0[] = "/sbin/procd";
+	char *argv[] = { arg0, NULL};
 	struct stat s;
 	char dbg[2];
 
@@ -85,8 +86,13 @@ plugd_proc_cb(struct uloop_process *proc, int ret)
 void
 preinit(void)
 {
-	char *init[] = { "/bin/sh", "/etc/preinit", NULL };
-	char *plug[] = { "/sbin/procd", "-h", "/etc/hotplug-preinit.json", NULL };
+	char init0[] = "/bin/sh";
+	char init1[] = "/etc/preinit";
+	char *init[] = { init0, init1, NULL };
+	char plug0[] = "/sbin/procd";
+	char plug1[] = "-h";
+	char plug2[] = "/etc/hotplug-preinit.json";
+	char *plug[] = { plug0, plug1, plug2, NULL };
 
 	LOG("- preinit -\n");
 
diff --git a/inittab.c b/inittab.c
index f8f0218..dae1eec 100644
--- a/inittab.c
+++ b/inittab.c
@@ -61,7 +61,7 @@ struct init_action {
 };
 
 static const char *tab = "/etc/inittab";
-static char *ask = "/sbin/askfirst";
+static char ask[] = "/sbin/askfirst";
 
 static LIST_HEAD(actions);
 
diff --git a/plug/coldplug.c b/plug/coldplug.c
index 5fcb9a3..8dc9014 100644
--- a/plug/coldplug.c
+++ b/plug/coldplug.c
@@ -40,7 +40,8 @@ static void udevtrigger_complete(struct uloop_process *proc, int ret)
 
 void procd_coldplug(void)
 {
-	char *argv[] = { "udevtrigger", NULL };
+	char argv0[] = "udevtrigger";
+	char *argv[] = { argv0, NULL };
 	unsigned int oldumask = umask(0);
 
 	umount2("/dev/pts", MNT_DETACH);
diff --git a/plug/hotplug.c b/plug/hotplug.c
index b5ebd07..86157a8 100644
--- a/plug/hotplug.c
+++ b/plug/hotplug.c
@@ -291,7 +291,7 @@ enum {
 };
 
 static struct cmd_handler {
-	char *name;
+	const char *name;
 	int atomic;
 	void (*handler)(struct blob_attr *msg, struct blob_attr *data);
 	void (*start)(struct blob_attr *msg, struct blob_attr *data);
@@ -566,7 +566,7 @@ void hotplug_last_event(uloop_timeout_handler handler)
 		uloop_timeout_cancel(&last_event);
 }
 
-void hotplug(char *rules)
+void hotplug(const char *rules)
 {
 	struct sockaddr_nl nls;
 	int nlbufsize = 512 * 1024;
@@ -594,7 +594,7 @@ void hotplug(char *rules)
 	uloop_fd_add(&hotplug_fd, ULOOP_READ);
 }
 
-int hotplug_run(char *rules)
+int hotplug_run(const char *rules)
 {
 	uloop_init();
 	hotplug(rules);
diff --git a/plug/hotplug.h b/plug/hotplug.h
index 9e469d1..2798247 100644
--- a/plug/hotplug.h
+++ b/plug/hotplug.h
@@ -18,17 +18,17 @@
 #include <libubox/uloop.h>
 
 #ifndef DISABLE_INIT
-void hotplug(char *rules);
-int hotplug_run(char *rules);
+void hotplug(const char *rules);
+int hotplug_run(const char *rules);
 void hotplug_shutdown(void);
 void hotplug_last_event(uloop_timeout_handler handler);
 void procd_coldplug(void);
 #else
-static inline void hotplug(char *rules)
+static inline void hotplug(const char *rules)
 {
 }
 
-static inline int hotplug_run(char *rules)
+static inline int hotplug_run(const char *rules)
 {
 	return 0;
 }
diff --git a/rcS.c b/rcS.c
index 1e38d39..559f575 100644
--- a/rcS.c
+++ b/rcS.c
@@ -104,7 +104,7 @@ static void q_initd_complete(struct runqueue *q, struct runqueue_task *p)
 	free(s);
 }
 
-static void add_initd(struct runqueue *q, char *file, char *param)
+static void add_initd(struct runqueue *q, const char *file, const char *param)
 {
 	static const struct runqueue_task_type initd_type = {
 		.run = q_initd_run,
@@ -130,7 +130,7 @@ static void add_initd(struct runqueue *q, char *file, char *param)
 	runqueue_task_add(q, &s->proc.task, false);
 }
 
-static int _rc(struct runqueue *q, char *path, const char *file, char *pattern, char *param)
+static int _rc(struct runqueue *q, const char *path, const char *file, const char *pattern, const char *param)
 {
 	char *dir = alloca(2 + strlen(path) + strlen(file) + strlen(pattern));
 	glob_t gl;
@@ -156,7 +156,7 @@ static int _rc(struct runqueue *q, char *path, const char *file, char *pattern,
 	return 0;
 }
 
-int rcS(char *pattern, char *param, void (*q_empty)(struct runqueue *))
+int rcS(const char *pattern, const char *param, void (*q_empty)(struct runqueue *))
 {
 	runqueue_init(&q);
 	q.empty_cb = q_empty;
@@ -165,7 +165,7 @@ int rcS(char *pattern, char *param, void (*q_empty)(struct runqueue *))
 	return _rc(&q, "/etc/rc.d", pattern, "*", param);
 }
 
-int rc(const char *file, char *param)
+int rc(const char *file, const char *param)
 {
 	return _rc(&r, "/etc/init.d", file, "", param);
 }
diff --git a/rcS.h b/rcS.h
index 91d37d1..9b6bb84 100644
--- a/rcS.h
+++ b/rcS.h
@@ -17,7 +17,7 @@
 
 #include <libubox/runqueue.h>
 
-extern int rcS(char *pattern, char *param, void (*q_empty)(struct runqueue *));
-extern int rc(const char *file, char *param);
+extern int rcS(const char *pattern, const char *param, void (*q_empty)(struct runqueue *));
+extern int rc(const char *file, const char *param);
 
 #endif
diff --git a/service/instance.c b/service/instance.c
index dccf4b4..3cd1b70 100644
--- a/service/instance.c
+++ b/service/instance.c
@@ -183,53 +183,76 @@ jail_run(struct service_instance *in, char **argv)
 	struct blobmsg_list_node *var;
 	struct jail *jail = &in->jail;
 	int argc = 0;
+	static char ujail[] = "/sbin/ujail";
 
-	argv[argc++] = "/sbin/ujail";
+	argv[argc++] = ujail;
 
 	if (jail->name) {
-		argv[argc++] = "-n";
+		static char opt[] = "-n";
+		argv[argc++] = opt;
 		argv[argc++] = jail->name;
 	}
 
 	if (jail->hostname) {
-		argv[argc++] = "-h";
+		static char opt[] = "-h";
+		argv[argc++] = opt;
 		argv[argc++] = jail->hostname;
 	}
 
 	if (in->seccomp) {
-		argv[argc++] = "-S";
+		static char opt[] = "-S";
+		argv[argc++] = opt;
 		argv[argc++] = in->seccomp;
 	}
 
-	if (in->no_new_privs)
-		argv[argc++] = "-c";
+	if (in->no_new_privs) {
+		static char opt[] = "-c";
+		argv[argc++] = opt;
+	}
 
-	if (jail->procfs)
-		argv[argc++] = "-p";
+	if (jail->procfs) {
+		static char opt[] = "-p";
+		argv[argc++] = opt;
+	}
 
-	if (jail->sysfs)
-		argv[argc++] = "-s";
+	if (jail->sysfs) {
+		static char opt[] = "-s";
+		argv[argc++] = opt;
+	}
 
-	if (jail->ubus)
-		argv[argc++] = "-u";
+	if (jail->ubus) {
+		static char opt[] = "-u";
+		argv[argc++] = opt;
+	}
 
-	if (jail->log)
-		argv[argc++] = "-l";
+	if (jail->log) {
+		static char opt[] = "-l";
+		argv[argc++] = opt;
+	}
 
-	if (jail->ronly)
-		argv[argc++] = "-o";
+	if (jail->ronly) {
+		static char opt[] = "-o";
+		argv[argc++] = opt;
+	}
 
 	blobmsg_list_for_each(&jail->mount, var) {
 		const char *type = blobmsg_data(var->data);
 
-		if (*type == '1')
-			argv[argc++] = "-w";
-		else
-			argv[argc++] = "-r";
-		argv[argc++] = (char *) blobmsg_name(var->data);
+		if (*type == '1') {
+			static char opt[] = "-w";
+			argv[argc++] = opt;
+		}
+		else {
+			static char opt[] = "-r";
+			argv[argc++] = opt;
+		}
+		argv[argc++] = strdup(blobmsg_name(var->data));
 	}
 
-	argv[argc++] = "--";
+	{
+		static char opt[] = "--";
+		argv[argc++] = opt;
+	}
 
 	return argc;
 }
diff --git a/service/trigger.c b/service/trigger.c
index 216e1f2..8f53dbd 100644
--- a/service/trigger.c
+++ b/service/trigger.c
@@ -49,7 +49,7 @@ struct trigger {
 
 struct job;
 struct cmd {
-	char *name;
+	const char *name;
 	void (*handler)(struct job *job, struct blob_attr *exec, struct blob_attr *env);
 };
 
diff --git a/signal.c b/signal.c
index 07dda9a..65d97d7 100644
--- a/signal.c
+++ b/signal.c
@@ -33,7 +33,7 @@ static void do_reboot(void)
 static void signal_shutdown(int signal, siginfo_t *siginfo, void *data)
 {
 	int event = 0;
-	char *msg = NULL;
+	const char *msg = NULL;
 
 #ifndef DISABLE_INIT
 	switch(signal) {
diff --git a/system.c b/system.c
index 504cdc0..71ff5a1 100644
--- a/system.c
+++ b/system.c
@@ -122,6 +122,7 @@ static int system_board(struct ubus_context *ctx, struct ubus_object *obj,
 		{
 			char *dest;
 			char ch;
+			const char *key;
 
 			key = line;
 			val = strchr(line, '=');
@@ -347,7 +348,8 @@ static void
 procd_spawn_upgraded(char *path)
 {
 	char *wdt_fd = watchdog_fd();
-	char *argv[] = { "/tmp/upgraded", NULL, NULL};
+	char arg0[] = "/tmp/upgraded";
+	char *argv[] = { arg0, NULL, NULL};
 
 	argv[1] = path;
 
diff --git a/upgraded/upgraded.c b/upgraded/upgraded.c
index d7433e7..2e5f7dc 100644
--- a/upgraded/upgraded.c
+++ b/upgraded/upgraded.c
@@ -36,7 +36,9 @@ static void upgrade_proc_cb(struct uloop_process *proc, int ret)
 
 static void sysupgarde(char *folder)
 {
-	char *args[] = { "/sbin/sysupgrade", "nand", NULL, NULL };
+	char arg0[] = "/sbin/sysupgrade";
+	char arg1[] = "nand";
+	char *args[] = { arg0, arg1, NULL, NULL };
 
 	args[2] = folder;
 	upgrade_proc.cb = upgrade_proc_cb;
-- 
2.4.10

